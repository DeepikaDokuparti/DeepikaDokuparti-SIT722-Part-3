# Your Solution
# Write Kubernetes Deployment Script

# Write Kubernetes Deployment Script

apiVersion: apps/v1
kind: Deployment
metadata:
  name: book-catalog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: book-catalog
  template:
    metadata:
      labels:
        app: book-catalog
    spec:
      containers: 
      - name: book-catalog
        image: week7.azurecr.io/book_catalog
        imagePullPolicy: IfNotPresent
        env:
        - name: PORT
          value: "3000"
        - name: DATABASE_URL
          value: "postgresql://week7_e8nn_user:47k0v00mcGhZ4jFppCUdxpbkCtVokYGN@dpg-crr4b9dds78s73cqegtg-a.oregon-postgres.render.com/week7_e8nn"
---
apiVersion: v1
kind: Service
metadata:
  name: book-catalog
spec:
  selector:
    app: book-catalog
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000

---

# Write Kubernetes Deployment Script

apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inventory-management
  template:
    metadata:
      labels:
        app: inventory-management
    spec:
      containers: 
      - name: inventory-management
        image: week7.azurecr.io/inventory_management
        imagePullPolicy: IfNotPresent
        env:
        - name: PORT
          value: "5000"
        - name: DATABASE_URL
          value: "postgresql://week7_e8nn_user:47k0v00mcGhZ4jFppCUdxpbkCtVokYGN@dpg-crr4b9dds78s73cqegtg-a.oregon-postgres.render.com/week7_e8nn"
---
apiVersion: v1
kind: Service
metadata:
  name: inventory-management
spec:
  selector:
    app: inventory-management
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000